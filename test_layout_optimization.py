#!/usr/bin/env python3
"""
测试布局优化效果
验证窗口宽度和三栏比例调整
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from PySide6.QtWidgets import QApplication
from ui.components.three_column_layout import ThreeColumnFeedbackUI

def main():
    """主测试函数"""
    app = QApplication(sys.argv)
    
    # 创建布局测试内容
    layout_test_content = """
# 🎨 布局优化测试

## 📐 新的窗口尺寸和比例

### 🖥️ 窗口尺寸优化
- **原始宽度**: 1400px (80%屏幕宽度)
- **优化宽度**: 1600px (90%屏幕宽度)
- **最小宽度**: 1000px → 1200px
- **高度保持**: 1200px (85%屏幕高度)

### 📊 三栏比例调整

#### 原始比例 (总宽度1400px):
- **左侧栏**: 40% (560px) → 53% (742px)
- **中间栏**: 40% (560px) → 27% (378px) ❌ 太窄
- **右侧栏**: 20% (280px) → 20% (280px)

#### 优化比例 (总宽度1600px):
- **左侧栏**: 50% (800px) ✅ 充足的内容展示空间
- **中间栏**: 35% (560px) ✅ 合适的选项和图片预览空间
- **右侧栏**: 15% (240px) ✅ 紧凑的项目信息显示

## 🎯 布局优化目标

### 左侧栏 (消息内容) - 50%
```markdown
# 足够的空间显示长文档
## 代码块有充足的宽度
```python
def example_function():
    # 代码行不会被过度换行
    long_variable_name = "这是一个很长的字符串，用来测试代码显示效果"
    return process_data(long_variable_name)
```

### 表格也有足够的空间
| 列1 | 列2 | 列3 | 列4 | 列5 |
|-----|-----|-----|-----|-----|
| 数据1 | 数据2 | 数据3 | 数据4 | 数据5 |
| 长数据内容 | 更长的数据内容 | 非常长的数据内容 | 超级长的数据内容 | 极其长的数据内容 |
```

### 中间栏 (智能推荐) - 35%
- ✅ 足够空间显示完整的选项文本
- ✅ 图片预览有合适的显示区域
- ✅ 多个选项可以舒适地排列
- ✅ 不会出现文本截断问题

### 右侧栏 (项目信息) - 15%
- ✅ 紧凑但清晰的信息显示
- ✅ 项目状态一目了然
- ✅ 自定义输入框大小合适

## 📱 响应式特性

### 最小宽度保护
- 当窗口宽度小于1200px时，保持最小尺寸
- 防止界面元素过度压缩
- 确保可用性不受影响

### 比例保持
- 三栏比例在不同窗口大小下保持一致
- 用户可以手动调整分割器
- 设置会自动保存和恢复

## 🔍 测试要点

请验证以下方面：

1. **整体宽度**: 窗口是否足够宽，不会显得拥挤
2. **左侧栏**: 长文档和代码是否有足够的显示空间
3. **中间栏**: 选项列表和图片预览是否舒适
4. **右侧栏**: 项目信息是否清晰可见
5. **分割器**: 是否可以手动调整各栏宽度
6. **响应式**: 在不同屏幕尺寸下是否正常工作

## 💡 预期效果

- **更好的阅读体验**: 左侧栏有充足空间显示内容
- **更好的交互体验**: 中间栏选项显示完整
- **更好的信息密度**: 右侧栏紧凑但不拥挤
- **更好的整体平衡**: 三栏比例协调美观

## 🎨 视觉效果

布局应该看起来：
- 🖼️ **宽敞**: 不会感觉拥挤
- ⚖️ **平衡**: 三栏比例协调
- 📖 **易读**: 文本和代码清晰
- 🎯 **高效**: 信息密度合适

如果以上效果都达到了，说明布局优化成功！
"""
    
    layout_test_options = [
        "✅ 整体宽度合适，不会显得拥挤",
        "📖 左侧栏空间充足，内容显示清晰",
        "🎯 中间栏宽度合适，选项显示完整",
        "📊 右侧栏信息紧凑但清晰可见",
        "⚖️ 三栏比例协调，视觉平衡",
        "🔧 分割器可以正常调整宽度",
        "📱 在不同屏幕尺寸下工作正常",
        "🎨 整体视觉效果美观专业",
        "⚡ 性能流畅，响应速度快",
        "🎉 布局优化完美，用户体验提升"
    ]
    
    # 创建UI实例
    ui = ThreeColumnFeedbackUI(layout_test_content, layout_test_options)
    ui.setWindowTitle("📐 布局优化测试 - Interactive Feedback MCP")
    
    # 显示窗口
    ui.show()
    
    # 打印布局信息
    print("📐 布局优化测试启动")
    print(f"🖥️ 窗口尺寸: {ui.width()}x{ui.height()}")
    print(f"📊 三栏比例: 50% + 35% + 15% = 100%")
    print(f"📏 预计栏宽: {ui.width()*0.5:.0f}px + {ui.width()*0.35:.0f}px + {ui.width()*0.15:.0f}px")
    
    # 运行应用
    return app.exec()

if __name__ == "__main__":
    sys.exit(main()) 